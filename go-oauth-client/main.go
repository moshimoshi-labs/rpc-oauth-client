package main

import (
	"crypto/rand"
	"encoding/base64"
	"flag"
	"log"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"golang.org/x/oauth2"
)

var (
	flagListen = flag.String("listen", ":1234", "listen port/address")

	flagAuthURL  = flag.String("oauth2-auth-url", "", "oauth2 auth url")
	flagTokenURL = flag.String("oauth2-token-url", "", "oauth2 token url")

	flagClientId    = flag.String("client-id", "", "oauth client id")
	flagRedirectUrl = flag.String("redirect-url", "", "redirect url")

	flagScopes ArrayFlag

	oauthEndpoint oauth2.Endpoint
	oauthConfig   oauth2.Config
	cv            *CodeVerifier
	stateStore    = map[string]bool{}
)

func main() {
	// Parse flags
	log.SetFlags(0)
	flag.Var(&flagScopes, "scopes", "Scopes to request")
	flag.Parse()

	// Endpoint is OAuth 2.0 endpoint.
	oauthEndpoint = oauth2.Endpoint{
		AuthURL:  *flagAuthURL,
		TokenURL: *flagTokenURL,
	}

	// Scopes: OAuth 2.0 scopes provide a way to limit the amount of access that is granted to an access token.
	oauthConfig = oauth2.Config{
		RedirectURL: *flagRedirectUrl,
		ClientID:    *flagClientId,
		Scopes:      flagScopes, // This is the RPC access level you are requesting
		Endpoint:    oauthEndpoint,
	}

	cv, _ = CreateCodeVerifier()

	e := echo.New()
	e.Use(middleware.Logger())

	e.GET("/", LoginPage)
	e.GET("/callbacks", CallbackPage)

	if err := e.Start(*flagListen); err != nil {
		log.Fatal(err)
	}
}

func LoginPage(c echo.Context) error {
	ctx := c.Request().Context()
	defer ctx.Done()

	// Create code_challenge with S256 method
	codeChallenge := cv.CodeChallengeS256()

	// Generate random state
	b := make([]byte, 32)
	_, err := rand.Read(b)
	if err != nil {
		return c.String(http.StatusOK, err.Error())
	}

	state := base64.StdEncoding.EncodeToString(b)

	stateStore[state] = true

	// Get the login URL for oauth
	loginURL := oauthConfig.AuthCodeURL(state, oauth2.SetAuthURLParam("code_challenge", codeChallenge), oauth2.SetAuthURLParam("code_challenge_method", "S256"))

	return c.HTML(http.StatusOK, "<a href='"+loginURL+"'>Login</a>")
}

func CallbackPage(c echo.Context) error {
	ctx := c.Request().Context()
	defer ctx.Done()

	code := c.QueryParam("code")
	state := c.QueryParam("state")
	scopes := c.QueryParam("scope")

	log.Println(scopes)

	if code == "" {
		return c.String(http.StatusOK, "authorization code is empty")
	}

	// If state is exist
	if _, exist := stateStore[state]; !exist {
		return c.String(http.StatusOK, "state is generated by this Client")
	}

	delete(stateStore, state)

	// Exchange code for access token
	accessToken, err := oauthConfig.Exchange(ctx, code, oauth2.SetAuthURLParam("code_verifier", cv.String()))
	if err != nil {
		return c.String(http.StatusOK, err.Error())
	}

	return c.JSON(http.StatusOK, accessToken)
}
